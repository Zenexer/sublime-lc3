%YAML 1.2
---
name: LC-3 Assembly
file_extensions: [lc3, lc-3, asm]
scope: source.lc3

variables:
  label: '\b[A-Za-z][\w_]{0,19}\b'
  space: '[ \t]'
  register: '\b[Rr][0-7]\b'
  hex: '[xX][\da-fA-F]{1,4}'
  int: '#-?\d{1,5}'
  comment: '[ \t]*(;.*)'
  end: '(?:{{comment}})?$'
  hex5: '[xX]-?0*1?[\da-fA-F]'
  dec5: '#(?:-0*1[0-6]|-0*\d|0*[1-2]\d|0*3[01]|0*\d)'
  udec5: '(?:-0*1[0-6]|-0*\d|0*[1-2]\d|0*3[01]|0*\d)'
  hex6: '[xX]-?0*[1-3]?[\da-fA-F]'
  dec6: '#(?:-0*[0-2]\d|-0*3[0-2]|-0*\d|0*[1-5]\d|0*6[0-3]|0*\d)'
  udec6: '(?:-0*[0-2]\d|-0*3[0-2]|-0*\d|0*[1-5]\d|0*6[0-3]|0*\d)'
  hex8: '[xX]0*[2-9A-Fa-f][0-9A-Fa-f]'
  dec8: '#0*(?:3[2-9]|[4-9][0-9]|1[0-1][0-9]|12[0-7])'
  udec8: '0*(?:3[2-9]|[4-9][0-9]|1[0-1][0-9]|12[0-7])'
  hex9: '[xX]-?0*1?[\da-fA-F]{1,2}'
  dec9:  '#-?0*\d{1,3}'
  udec9:  '-?0*\d{1,3}'
  hex11: '[xX]-?0*[0-7]?[\da-fA-F]{1,2}'
  dec11: '#-?0*\d{1,4}'
  udec11: '-?0*\d{1,4}'
  hex16: '[xX](?:-0*[0-7]?[0-9A-Fa-f]{1,3}|0*[0-9A-Fa-f]{1,4})'
  dec16: '#-?0*\d{1,5}'
  udec16: '-?0*\d{1,5}'
  imm5: '(?:([xX]-?0*1?[\da-fA-F])|(#?(?:-0*1[0-6]|-0*\d|0*[1-2]\d|0*3[01]|0*\d)))'
  imm6: '(?:([xX]-?0*[1-3]?[\da-fA-F])|(#?(?:-0*[0-2]\d|-0*3[0-2]|-0*\d|0*[1-5]\d|0*6[0-3]|0*\d)))'
  imm16: '(?:([xX]-?0*[\da-fA-F]{1,4})|(#?-?0*\d{1,5}))'
  offset6: '(?:{{imm6}})'
  PCoffset9: '(?:([xX]-?0*1?[\da-fA-F]{1,2})|(#?-?0*\d{1,3})|({{label}}))'
  PCoffset11: '(?:([xX]-?0*[0-7]?[\da-fA-F]{1,2})|(#?-?0*\d{1,4})|({{label}}))'
  trapvect8: '(?:([xX]0*[2-9A-Fa-f][0-9A-Fa-f])|(#?0*(?:3[2-9]|[4-9][0-9]|1[0-1][0-9]|12[0-7])))'
  BR: '\bBR[nN]?[zZ]?[pP]?\b'
  pre_space: '(?:(?={{space}})|$)'
  pre_opcode: '{{space}}+(?=[A-Za-z\.])'

contexts:
  main:
    - include: outer_comment
    - match: '[.]ORIG\b'
      scope: keyword.control.import.lc3
      set: preproc_imm16
    - match: '\S(?:[^.;\r\n]|[.](?!ORIG))(?<!{{space}})'
      scope: invalid.illegal.missing-orig.lc3
  end:
    - include: outer_comment
    - match: '\S[^;\r\n]*(?<!{{space}})'
      scope: invalid.illegal.code-past-end.lc3
  base:
    - include: comment
    - match: '^(([xX][A-Fa-f0-9]+)){{pre_space}}'
      captures:
        1: entity.name.function.lc3
        2: invalid.deprecated.ambiguous-label.lc3
      set:
        - meta_scope: meta.function-definition.lc3
        - include: pre_opcode
    - match: '^{{label}}{{pre_space}}'
      scope: entity.name.function.lc3
      set:
        - meta_scope: meta.function-definition.lc3
        - include: pre_opcode
    - match: '^{{pre_opcode}}'
      set: opcode
    - match: '^(([^\sA-Za-z])[^ \t\r\n]+){{pre_space}}'
      captures:
        1: entity.name.function.lc3
        2: invalid.illegal.bad-label.lc3
      set:
        - meta_scope: meta.function-definition.lc3
        - include: pre_opcode
    - match: '^([A-Za-z][\w_]{19}([^ \t\r\n]+?)){{pre_space}}'
      captures:
        1: entity.name.function.lc3
        2: invalid.illegal.bad-label.lc3
      set:
        - meta_scope: meta.function-definition.lc3
        - include: pre_opcode
    - match: '^([A-Za-z][\w_]{0,19}([^ \t\r\n]+?)){{pre_space}}'
      captures:
        1: entity.name.function.lc3
        2: invalid.illegal.bad-label.lc3
      set:
        - meta_scope: meta.function-definition.lc3
        - include: pre_opcode

  corrupt:
    - include: comment
    - match: '$'
      set: base

  pre_opcode:
    - match: '{{pre_opcode}}'
      set: opcode
    - match: '\n'
      scope: invalid.illegal.missing-opcode.lc3
      set: base
  opcode:
    - include: comment
    - match: '$'
      set: base
    - match: '\b(?:ADD|AND)\b'
      scope: keyword.control.lc3
      set: reg_reg_imm5reg
    - match: '{{BR}}'
      scope: keyword.control.lc3
      set: call_pcoff9
    - match: '\b(?:JMP|JSRR)\b'
      scope: keyword.control.lc3
      set: call_reg_optoff6
    - match: '\b(?:JSR)\b'
      scope: keyword.control.lc3
      set: call_pcoff11
    - match: '\b(?:LDI?|LEA|STI?)\b'
      scope: keyword.control.lc3
      set: reg_pcoff9
    - match: '\b(?:LDR|STR)\b'
      scope: keyword.control.lc3
      set: reg_reg_off6
    - match: '\b(?:NOT)\b'
      scope: keyword.control.lc3
      set: reg_reg
    - match: '\b(?:RET|RTI)\b'
      scope: keyword.control.lc3
      set: call_none
    - match: '\b(?:TRAP)\b'
      scope: keyword.control.lc3
      set: call_trapvect8
    - match: '\b(?:GETC|OUT|PUTS|IN|PUTSP|HALT)\b'
      scope: constant.language.trap.lc3
      set: call_none
    - match: '(?<={{space}})[.](?:END)\b'
      scope: meta.preprocessor.lc3 keyword.control.import.lc3
      set: end
    - match: '(?<={{space}})[.](?:BLKW|FILL)\b'
      scope: keyword.control.import.lc3
      set: preproc_imm16
    - match: '(?<={{space}})[.](?:EXTERNAL)\b'
      scope: keyword.control.import.lc3
      set: preproc_label
    - match: '(?<={{space}})[.](?:STRINGZ)\b'
      scope: keyword.control.import.lc3
      set: preproc_string
    - match: '(?<={{space}})[^ \t\r\n]+'
      scope: invalid.illegal.illegal-opcode.lc3

  no_operand:
    - include: comment
    - match: '$'
      set: base
    - match: '\S.*'
      scope: invalid.illegal.stray-operand.lc3
      set: corrupt
  nonfinal_operand:
    - match: ';.*|[\n;,]|$'
      scope: invalid.illegal.missing-operand.lc3
      set: corrupt
    - match: '\S.*'
      scope: invalid.illegal.wrong-operand.lc3
      set: corrupt
  final_operand:
    - match: ';.*|[\n;,]|$'
      scope: invalid.illegal.missing-operand.lc3
      set: corrupt
    - match: '\S.*'
      scope: invalid.illegal.stray-operand.lc3
      set: corrupt
  operand_terminator:
    - match: ',[^;\r\n]*'
      scope: invalid.illegal.stray-comma.lc3
      set: corrupt
    - include: no_operand
  optseparator:
    - match: '[^,;\r\n \t]+'
      scope: invalid.illegal.missing-operand.lc3
      set: corrupt
  separator:
    - include: optseparator
    - match: ';.*|\n|$'
      scope: invalid.illegal.missing-operand.lc3
      set: corrupt

  outer_comment:
    - match: ';'
      scope: punctuation.definition.comment.lc3
      push:
        - meta_scope: comment.line.lc3
        - match: '\n'
          pop: true
  comment:
    - match: ';'
      scope: punctuation.definition.comment.lc3
      push:
        - meta_scope: comment.line.lc3
        - match: '\n'
          set: base
  reg_reg_imm5reg:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_reg_imm5reg
    - include: nonfinal_operand
  to_reg_imm5reg:
    - match: ','
      scope: punctuation.separator.lc3
      set: reg_imm5reg
    - include: separator
  reg_imm5reg:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_imm5reg
    - include: nonfinal_operand
  to_imm5reg:
    - match: ','
      scope: punctuation.separator.lc3
      set: imm5reg
    - include: separator
  imm5reg:
    - match: '{{hex5}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec5}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec5}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - match: '{{register}}'
      scope: variable.language.lc3
      set: operand_terminator
    - include: final_operand
  call_pcoff9:
    - meta_scope: meta.function-call.lc3
    - match: '{{hex9}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec9}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec9}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - match: '{{label}}'
      scope: variable.function.lc3
      set: operand_terminator
    - include: final_operand
  call_reg_optoff6:
    - meta_scope: meta.function-call.lc3
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_optoff6
    - include: nonfinal_operand
  to_optoff6:
    - include: comment
    - match: '$'
      set: base
    - match: ','
      scope: punctuation.separator.lc3
      set: off6
    - include: optseparator
  to_off6:
    - match: ','
      scope: punctuation.separator.lc3
      set: off6
    - include: separator
  off6:
    - match: '{{hex6}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec6}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec6}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - include: final_operand
  reg_reg:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_reg
    - include: nonfinal_operand
  to_reg:
    - match: ','
      scope: punctuation.separator.lc3
      set: reg
    - include: separator
  reg:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: operand_terminator
    - include: final_operand
  preproc_string:
    - meta_scope: meta.preprocessor.lc3
    - match: '"'
      scope: punctuation.definition.string.begin.lc3
      set:
        - meta_scope: string.quoted.double.lc3
        - match: '\\[\\abefnrtv"]'
          scope: constant.character.escape.lc3
        - match: '"'
          scope: punctuation.definition.string.end.lc3
          set: operand_terminator
    - include: operand_terminator
  preproc_label:
    - meta_scope: meta.preprocessor.lc3
    - match: '{{label}}'
      scope: entity.name.function.lc3
      set: operand_terminator
    - include: final_operand
  preproc_imm16:
    - meta_scope: meta.preprocessor.lc3
    - match: '{{hex16}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec16}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec16}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - include: final_operand
  call_trapvect8:
    - meta_scope: meta.function-call.lc3
    - match: '{{hex8}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec8}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec8}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - include: final_operand
  call_none:
    - meta_scope: meta.function-call.lc3
    - include: no_operand
  preproc_none:
    - meta_scope: meta.preprocessor.lc3
    - include: no_operand
  reg_reg_off6:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_reg_off6
  to_reg_off6:
    - match: ','
      scope: punctuation.separator.lc3
      set: reg_off6
    - include: separator
  reg_off6:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_off6
    - include: nonfinal_operand
  reg_pcoff9:
    - match: '{{register}}'
      scope: variable.language.lc3
      set: to_pcoff9
    - include: nonfinal_operand
  to_pcoff9:
    - match: ','
      scope: punctuation.separator.lc3
      set: pcoff9
    - include: separator
  pcoff9:
    - match: '{{hex9}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec9}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec9}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - match: '{{label}}'
      scope: variable.function.lc3
      set: operand_terminator
    - include: final_operand
  call_pcoff11:
    - meta_scope: meta.function-call.lc3
    - match: '{{hex11}}'
      scope: constant.numeric.hex.lc3
      set: operand_terminator
    - match: '{{dec11}}'
      scope: constant.numeric.integer.lc3
      set: operand_terminator
    - match: '{{udec11}}'
      scope: constant.numeric.integer.lc3 invalid.deprecated.unqualified-integer.lc3
      set: operand_terminator
    - match: '{{label}}'
      scope: variable.function.lc3
      set: operand_terminator
    - include: final_operand

  ####################

  pre_string:
    - match: '"'
      scope: punctuation.definition.string.begin.lc3
      set: string

  string:
    - meta_scope: string.quoted.double.lc3
    - match: '\\[\\abefnrtv"]'
      scope: constant.character.escape.lc3
    - match: '"'
      scope: punctuation.definition.string.end.lc3
      set: post_string

  post_string:
    - match: '{{end}}'
      captures:
        1: comment.line.lc3
      set: base
    - match: '$'
      set: base